name: Unit Test Workflow

on: [push]

#Define a job
jobs:
  
  rasa-testing:
    #Using github action for RASA from https://github.com/marketplace/actions/rasa-train-test-model-github-action
    name: Rasa-testing
    runs-on: ubuntu-latest
    steps:
      # Checks-out GitHub repository
      # more: https://github.com/actions/checkout
      - uses: actions/checkout@v2
      # Run rasa train and rasa test
      - name: Run rasa test
        uses: RasaHQ/rasa-train-test-gha@main
        with:
          test_type: nlu
          rasa_train: false
          # rasa_version: '3.2.13'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # The 'actions/upload-artifact' action to upload files
      # More: https://github.com/actions/upload-artifact
      - uses: actions/upload-artifact@v2
        with:
          name: rasa-demo-cfg
          path: |
            results
            reports

  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]

    # Define steps for the job
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
          pip install farm-haystack
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install "numpy>=1.22.0,<1.24.0"
      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
          # default set of ruff rules with GitHub Annotations
          ruff --format=github --target-version=py37 .
        #Even if linting failed, continue
        continue-on-error: true  
      - name: Test knowledgebase
        run: python -m unittest tests/test_knowledgebase.py
      - name: Test knowledgebase aggregate discrete range
        run: python -m unittest tests/test_aggregationDiscreteRange.py
      - name: Test knowledgebase percentage calculation
        run: python -m unittest tests/test_calculatePercentage.py
      - name: Test output controller (template)
        run: python -m unittest tests/test_outputController.py
      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

    


  